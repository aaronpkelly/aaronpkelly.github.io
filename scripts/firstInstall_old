#! /bin/bash

# Please clone this linuxConfigFiles repo and place the directory in ~/src
# Gentoo users!: Install whiptail for menus

# this script is tailored for two types of installation:
# - non-persistent .iso booting from grub (bare essentials)
# - persistent installations (more packages)
# TODO: tmux configuration
# TODO: tty auto-login, use command "sudo vim /etc/systemd/system/getty.target.wants/getty@tty1.service" - editing for tty1 makes changes on ALL tty

environmentVariables=("BROWSER=/usr/bin/lynx" "EDITOR=vim")
extraPackages=("bsdgames" "caca-utils" "calibre" "cmatrix" "links2" "xlip" "xpdf")
nonPersistent=("git" "libcurl3" "mc" "moc" "tmux" "tree" "vim")
persistent=("docker.io", "git" "golang" "irssi" "irssi-plugin-xmpp" "libncurses5-dev" "libncursesw5-dev" "lynx" "make" "mplayer" "mc" "moc" "mutt" "newsbeuter" "octave" "tmux" "tree" "unoconv" "vim")
raspberryPi=("git" "irssi" "libcurl3" "locales-all" "lynx" "mc" "mutt" "newsbeuter" "rtorrent" "tree")
softwareUsedByUCD=("https://dl.google.com/dl/android/studio/ide-zips/2.2.1.0/android-studio-ide-145.3330264-linux.zip" "http://downloads.sourceforge.net/project/weka/weka-3-8/3.8.0/weka-3-8-0.zip?r=https%3A%2F%2Fsourceforge.net%2Fprojects%2Fweka%2F&ts=1476876960&use_mirror=heanet")
softwareAdditional="chromium-browser"

# specify git repos here
gitRepos_personal=("linuxConfigFiles" "passwordStore" "privateDocs" "programming" "publicDocs" "radio" "vorophobe.github.io")
gitRepos_starred=("https://github.com/visit1985/mdp" "https://github.com/t3rm1n4l/megacmd" "http://git.zx2c4.com/password-store")
gitRepos_starred_destination=("mdp" "megacmd" "password-store")
gitRepos_ucd=("comp30170" "comp30230" "comp47480" "comp30490" "comp30540" "ucd")

# function to read user input
readUserInput() {
	read -rep "$1" -n 1 -r
}

#### welcome #################################################################
echo "welcome to my bootstrap installation file!"

#### package installation ####################################################
readUserInput "re-synchronise package index from sources (apt-get update)? (y/n)"
if [ "$REPLY" == "y" ]
then
	sudo apt-get update
fi

readUserInput "install distro specific packages? (you will need to choose a specific distro and installation type) (y/n)"
if [ "$REPLY" == "y" ]
then
	#### whiptail menus for choosing distribution and install type ###############
	# whiptail menu for choosing distrubution
	DIST=$(whiptail --title "please choose your distribution:" --backtitle "DO NOT RUN AS ROOT!" --radiolist "" 15 30 5\
	"debian-based" "" ON \
	"fedora" "" OFF \
	"gentoo" "" OFF \
	3>&1 1>&2 2>&3)

# whiptail menu for choosing install type
INSTALL_TYPE=$(whiptail --title "please choose your installation type:" --backtitle "DO NOT RUN AS ROOT!" --radiolist "" 15 60 5\
	"non-persistent (bare essentials)" "" ON \
	"persistent (more packages)" "" OFF \
	"raspberryPi" "" OFF \
	3>&1 1>&2 2>&3)

	#### package installation ####################################################
	if [ "$DIST" = "debian-based" ]; then
		if [ "$INSTALL_TYPE" = "non-persistent (bare essentials)" ]; then
			echo "[info] you have selected non-persistent, installing packages now..."
			for i in "${nonPersistent[@]}"
			do
				sudo apt install -y $i
			done
		elif [ "$DIST" = "persistent (more packages)" ]; then
			echo "[info] you have selected persistent, installing packages now..."
			for i in "${persistent[@]}"
			do
				sudo apt install -y $i
			done
		else
			echo "[info] you have selected raspberryPi, installing packages now..."
			for i in "${raspberryPi[@]}"
			do
				sudo apt install -y $i
			done
		fi
	fi
fi

# .bashrc ####################################################################
readUserInput "configure .bashrc options? (y/n)"
if [ "$REPLY" == "y" ]
then
	readUserInput "add environment variables? (BROWSER=lynx, EDITOR=vim, etc...) (y/n)"
	if [ "$REPLY" == "y" ]
	then
		readUserInput "find and remove old bindings? (y/n)"
			if [ "$REPLY" == "y" ]
			then
				sed -i "/BROWSER=/d" ~/.bashrc
				sed -i "/EDITOR=/d" ~/.bashrc
			fi
		for i in "${environmentVariables[@]}"
			do
				readUserInput "set $i? (y/n)"
				if [ "$REPLY" == "y" ]
					then
					echo "export $i" >> ~/.bashrc
				fi
			done
	fi
	readUserInput "coloured prompt (will uncomment #force_color_promopt=yes)? (y/n)"
	if [ "$REPLY" == "y" ]
	then
		sed -i "s/#force_color/force_color/g" ~/.bashrc
	fi
	readUserInput "source .bashrc?, in order to pickup new changes? (y/n)"
	if [ "$REPLY" == "y" ]
	then
		source ~/.bashrc
	fi
fi


#### git configuration #######################################################
readUserInput "configure git: set global values and make ~/src ?  (y/n)"
if [ "$REPLY" == "y" ]
then
	git config --global credential.helper 'cache --timeout=7200'
	git config --global push.default simple
	git config --global user.email "vorophobe@gmail.com"
	git config --global user.name "Aaron Kelly"
	mkdir ~/src
fi




#### git repo clone ##########################################################
readUserInput "clone personal git repos? (y/n)"
if [ "$REPLY" == "y" ]
then
	for i in "${gitRepos_personal[@]}"
	do
		readUserInput "clone $i? (y/n)"
		if [ "$REPLY" == "y" ]
		then
			git clone https://vorophobe@github.com/vorophobe/$i ~/src/$i
		fi
	done
fi

# this uses two arrays.
# i had great fun trying to loop through them properly - i just settled for something
# very simple, there's surely a more elegant way
readUserInput "clone starred git repos? (y/n)"
if [ "$REPLY" == "y" ]
then
  i=0
	for e in "${gitRepos_starred[@]}"; do
		readUserInput "clone $e? (y/n)"
		if [ "$REPLY" == "y" ]
		then
			git clone ${gitRepos_starred[$i]} ~/src/${gitRepos_starred_destination[$i]}
		fi
		i=$(($i+1));
	done
fi

# Move personal passwordStore to .password-store
readUserInput "move passwordStore (my personal git repo!) to hidden directory .password-store? (y/n)"
if [ "$REPLY" == "y" ]
then
	  mv ~/src/passwordStore ~/.password-store
fi

#### ucd related #############################################################
readUserInput "clone ucd git repos? (y/n)"
if [ "$REPLY" == "y" ]
then
	for i in "${gitRepos_ucd[@]}"
	do
		readUserInput "clone $i? (y/n)"
		if [ "$REPLY" == "y" ]
		then
			git clone https://vorophobe@github.com/vorophobe/$i ~/src/$i
		fi
	done
fi

readUserInput "create symbolic links to calendar and modules files? (y/n)"
if [ "$REPLY" == "y" ]
then
    ln -s ~/src/ucd/calendar ~/calendar
    ln -s ~/src/ucd/modules ~/modules
fi

readUserInput "download external software used in ucd modules? (androidStudio/weka) (y/n)"
if [ "$REPLY" == "y" ]
then
	for i in "${softwareUsedByUCD[@]}"
		do
			readUserInput "clone $i? (y/n)"
			if [ "$REPLY" == "y" ]
			then
				wget $i ~/Downloads
			fi
		done
fi

# symbolic links #############################################################
readUserInput "do you wish to create symbolic links to dotfiles? (.irssi, mc.keymap, .megacmd.json, .mailcap, .newsbeuter, .vim, .vimrc, lynx.cfg)  (y/n)"
if [ "$REPLY" == "y" ]
then
	mkdir ~/.config
	mkdir ~/.config/mc
	# ln -s ~/src/linuxConfigFiles/alsa/.asoundrc ~/.asoundrc
	ln -s ~/src/linuxConfigFiles/bash/weatherDublin ~/weatherDublin
	ln -s ~/src/linuxConfigFiles/irssi/.irssi ~/.irssi
	ln -s ~/src/linuxConfigFiles/mc/hotlist ~/.config/mc/hotlist
	ln -s ~/src/linuxConfigFiles/mc/mc.keymap ~/.config/mc/mc.keymap
	ln -s ~/src/linuxConfigFiles/megacmd/.megacmd.json ~/.megacmd.json
	ln -s ~/src/linuxConfigFiles/mutt/.mailcap ~/.mailcap
	ln -s ~/src/linuxConfigFiles/mutt/.mutt ~/.mutt
	ln -s ~/src/linuxConfigFiles/newsbeuter/ ~/.newsbeuter
	# ln -s ~/src/linuxConfigFiles/screen/.screenrc ~/.screenrc
	ln -s ~/src/linuxConfigFiles/vim/.vimrc ~/.vimrc
	ln -s ~/src/linuxConfigFiles/vim/.vimrc ~/.vimrc

	ln -s ~/src/ucd/calendar ~/calendar
	ln -s ~/src/ucd/modules ~/modules
	# ln -s ~/src/ucd/startAllScreens ~/startAllScreens

	# i am unsure where the default lynx.cfg locations are - need to research that.
	# also i was sure that all debian lynx dotfiles go in the /etc/lynx-cur directory,
	# but here i am on my dell laptop and i can see one at /etc/lynx.. jeez
	sudo rm /etc/lynx-cur/lynx.cfg
	sudo rm /etc/lynx/lynx.cfg
	sudo ln -s ~/src/linuxConfigFiles/lynx/lynx.cfg /etc/lynx-cur/lynx.cfg
	sudo ln -s ~/src/linuxConfigFiles/lynx/lynx.cfg /etc/lynx/lynx.cfg

fi

# softwareAdditional #########################################################
readUserInput "install additional large software? (chromium browser, spotify... (y/n)"
if [ "$REPLY" == "y" ]
then
	for i in ${softwareAdditional[@]}
	do
		readUserInput "install $i (y/n)"
		if [ "$REPLY" == "y" ]
		then
			sudo apt install $i
		fi
	done

	# spotify - a bit more setup required so it gets its own section
	readUserInput "install spotify client? this will entail adding a repo + key and resynchronising package index (y/n)"
	if [ "$REPLY" == "y" ]
	then
		echo "# 1. Add the Spotify repository signing key to be able to verify downloaded packages"
		sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys BBEBDCB318AD50EC6865090613B00F1FD2C19886

		echo "# 2. Add the Spotify repository"
		echo deb http://repository.spotify.com stable non-free | sudo tee /etc/apt/sources.list.d/spotify.list

		echo "# 3. Update list of available packages"
		sudo apt-get update

		echo "# 4. Install Spotify"
		sudo apt-get install spotify-client
	fi
fi

##############################################################################
printf "\n[info] Install script complete!\n"
printf "[info] Please run make/make install on any github repos - this includes password-store !\n"
printf "[info] For dvorak, either edit /etc/default/kebyoard, set to IE(dvorak), and then run 'sudo service keyboard-setup restart'\n"
printf "[info] Or, from a terminal-only environment, type 'sudo loadkeys dvorak' for a temporary solution"
printf "\n"

#### symbolic link creation ##################################################
# if [ "$INSTALL_TYPE" = "non-persistent (bare essentials)" ]; then
#	echo "[info] symbolic link creation to /home partition - please mount the persistent home partition using the NEMO file system manager now"
#	echo "[info] making symbolic link to /media/mint/home/aaron, it will be placed in the default home directory"
#	ln -s /media/mint/home/aaron ~/
# fi

